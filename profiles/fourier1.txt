Timer unit: 1e-07 s

Total time: 0.0001026 s
File: C:\Users\d2dud\Documents\GitHub\DESC_APC524\desc\basis.py
Function: fourier at line 696

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   696                                           @functools.partial(jit, static_argnums=(1))
   697                                           def fourier(theta, m, NFP=1, dt=0):
   698                                               """Fourier series
   699                                           
   700                                               Parameters
   701                                               ----------
   702                                               theta : ndarray, shape(N,)
   703                                                   poloidal/toroidal coordinates to evaluate basis
   704                                               m : ndarray of int, shape(K,)
   705                                                   poloidal/toroidal mode number(s)
   706                                               NFP : int
   707                                                   number of field periods (Default = 1)
   708                                               dt : int
   709                                                   order of derivative (Default = 0)
   710                                           
   711                                               Returns
   712                                               -------
   713                                               y : ndarray, shape(N,K)
   714                                                   basis function(s) evaluated at specified points
   715                                           
   716                                               """
   717         1        275.0    275.0     26.8      theta_2d = jnp.atleast_2d(theta).T
   718         1         48.0     48.0      4.7      m_2d = jnp.atleast_2d(m)
   719         1        295.0    295.0     28.8      m_pos = (m_2d >= 0).astype(int)
   720         1         46.0     46.0      4.5      m_neg = (m_2d < 0).astype(int)
   721         1         77.0     77.0      7.5      m_abs = jnp.abs(m_2d)*NFP
   722         1          4.0      4.0      0.4      if dt == 0:
   723         1        281.0    281.0     27.4          return m_pos*np.cos(m_abs*theta_2d) + m_neg*np.sin(m_abs*theta_2d)
   724                                               else:
   725                                                   return m_abs*(m_neg-m_pos)*fourier(theta, -m, NFP=NFP, dt=dt-1)
   726                                           
   727                                               """
   728                                               theta = jnp.atleast_1d(theta)[:, jnp.newaxis]
   729                                               m = jnp.atleast_1d(m)[jnp.newaxis]
   730                                               m_pos = (m >= 0)
   731                                               m_neg = (m < 0)
   732                                               m_abs = jnp.abs(m)
   733                                               der = (1j*m_abs*NFP)**dt
   734                                               exp = der*jnp.exp(1j*m_abs*NFP*theta)
   735                                               return m_pos*jnp.real(exp) + m_neg*jnp.imag(exp)
   736                                               """